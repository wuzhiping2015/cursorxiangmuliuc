/**
 * SCSS Mixins 混合函数库
 * 包含常用的样式混合函数，提高开发效率
 * @author 前端工程师团队
 * @date 2024-12-XX
 */

@use "./variables.scss" as *;
// ==================== 布局相关 ====================

/**
 * Flex 布局快捷方式
 * @param {string} $direction - 主轴方向
 * @param {string} $justify - 主轴对齐方式
 * @param {string} $align - 交叉轴对齐方式
 */

@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}


/**
 * 居中布局
 */

@mixin center {
    @include flex(row, center, center);
}


/**
 * 绝对定位居中
 */

@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// ==================== 文本相关 ====================

/**
 * 文本溢出省略号
 * @param {number} $lines - 行数，默认1行
 */

@mixin text-ellipsis($lines: 1) {
    @if $lines==1 {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    @else {
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
}

// ==================== 边框相关 ====================

/**
 * 1px 边框解决方案
 * @param {string} $position - 边框位置
 * @param {color} $color - 边框颜色
 */

@mixin border-1px($position: bottom, $color: $border-color) {
    position: relative;
    &::after {
        content: '';
        position: absolute;
        background-color: $color;
        @if $position==bottom {
            bottom: 0;
            left: 0;
            width: 100%;
            height: 1px;
            transform: scaleY(0.5);
            transform-origin: 0 bottom;
        }
    }
}

// ==================== 响应式相关 ====================

/**
 * 响应式断点
 * @param {string} $breakpoint - 断点名称
 */

@mixin respond-to($breakpoint) {
    @if $breakpoint==xs {
        @media (max-width: #{$breakpoint-xs - 1px}) {
            @content;
        }
    }
    @if $breakpoint==sm {
        @media (min-width: #{$breakpoint-sm}) {
            @content;
        }
    }
    @if $breakpoint==md {
        @media (min-width: #{$breakpoint-md}) {
            @content;
        }
    }
    @if $breakpoint==lg {
        @media (min-width: #{$breakpoint-lg}) {
            @content;
        }
    }
    @if $breakpoint==xl {
        @media (min-width: #{$breakpoint-xl}) {
            @content;
        }
    }
}

// ==================== 动画相关 ====================

/**
 * 过渡动画
 * @param {string} $property - 动画属性
 * @param {time} $duration - 动画时长
 * @param {string} $timing - 缓动函数
 */

@mixin transition($property: all, $duration: $animation-duration-base, $timing: ease) {
    transition: $property $duration $timing;
}

// ==================== 按钮相关 ====================

/**
 * 按钮基础样式
 * @param {color} $bg - 背景色
 * @param {color} $color - 文字色
 * @param {number} $radius - 圆角
 */

@mixin button-base($bg: $primary-color, $color: #fff, $radius: $border-radius-base) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: $spacing-sm $spacing-base;
    border: none;
    border-radius: $radius;
    background-color: $bg;
    color: $color;
    font-size: $font-size-base;
    font-weight: $font-weight-medium;
    line-height: 1;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    user-select: none;
    outline: none;
    @include transition(all);
    &:active {
        transform: translateY(1px);
    }
    &:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        &:active {
            transform: none;
        }
    }
}

// ==================== 卡片相关 ====================

/**
 * 卡片样式
 * @param {number} $radius - 圆角
 * @param {string} $shadow - 阴影
 */

@mixin card($radius: $border-radius-lg, $shadow: $box-shadow-base) {
    background-color: $background-color;
    border-radius: $radius;
    box-shadow: $shadow;
    overflow: hidden;
}

// ==================== 安全区域适配 ====================

/**
 * 安全区域适配
 * @param {string} $property - CSS属性
 * @param {string} $direction - 方向
 */

@mixin safe-area($property: padding, $direction: all) {
    @if $direction==top {
        #{$property}-top: env(safe-area-inset-top);
    }
    @else if $direction==bottom {
        #{$property}-bottom: env(safe-area-inset-bottom);
    }
    @else {
        #{$property}-top: env(safe-area-inset-top);
        #{$property}-right: env(safe-area-inset-right);
        #{$property}-bottom: env(safe-area-inset-bottom);
        #{$property}-left: env(safe-area-inset-left);
    }
}