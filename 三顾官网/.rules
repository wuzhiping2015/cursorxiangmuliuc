# SANGOAI静态网站开发指令（基于Cursor AI）
## 一、技术选型
### 1.1 基础技术
- **HTML5**：运用HTML5语义化标签搭建网站结构，如`<header>`构建网站头部（包含导航栏），
`<main>`包裹页面主要内容（像首页的船舶3D模型展示区、各页面的核心信息板块），`<footer>`设置底部版权等信息，提升代码可读性与搜索引擎优化效果。
- **CSS3**：承担网站样式设计重任，利用`@media`查询实现针对PC、平板、手机端的响应式布局。
通过设置不同断点，调整页面元素的布局、字体大小、边距等样式。借助`transform`、`transition`属性制作如按钮悬停变色、导航栏展开收起动画等简单交互效果，增强用户体验。
- **JavaScript（可选，用于交互增强）**：若有交互需求，如导航栏切换、图片轮播等，可使用JavaScript。
不过，整体保持静态网站特性，不依赖复杂动态数据交互。

### 1.2 辅助技术与工具
- **Tailwind CSS**：借助Tailwind CSS的丰富类名快速构建页面样式并实现响应式设计。利用`flex`、`grid`类进行布局，通过`text - color`类设置文本颜色（对应网站品牌色深蓝、亮蓝、橙色），使用`rounded`类实现界面元素圆角化。
- **Font Awesome**：引入Font Awesome图标库，在导航栏、按钮、列表项等位置添加图标，增强视觉效果与操作直观性，提升用户交互体验。
- **Sass（可选，用于样式管理）**：对于样式复杂的项目，采用Sass预处理语言。通过定义变量管理颜色、字体等样式属性，运用`@import`导入不同样式文件，提高样式代码的可维护性。

## 二、工程架构
### 2.1 目录结构
```bash
project/
├── assets/
│   ├── fonts/ # 存放自定义字体文件
│   ├── images/ # 存放3D船舶模型、系统操作界面截图、项目实景照片等图片资源
│   └── styles/
│       ├── base/
│       │   ├── reset.css # 样式重置文件，统一浏览器默认样式
│       │   └── typography.css # 排版样式，设置字体、字号、行间距等
│       ├── components/
│       │   ├── button.css # 按钮样式
│       │   └── input.css # 输入框样式（若有表单）
│       ├── layout/
│       │   ├── header.css # 头部导航栏样式
│       │   └── footer.css # 底部页脚样式
│       └── themes/
│           ├── light.css # 明亮主题样式
│           └── dark.css # 暗黑主题样式（若有）
├── pages/
│   ├── index.html # 首页
│   ├── solutions.html # 解决方案页
│   ├── technology.html # 技术优势页
│   ├── cases.html # 案例展示页
│   ├── news.html # 新闻资讯页
│   ├── about.html # 关于我们页
│   └── contact.html # 联系方式页
├── scripts/ # 存放JavaScript文件（若有）
│   ├── navigation.js # 导航栏交互逻辑
│   └── carousel.js # 图片轮播逻辑（若有）
└── index.html # 网站入口文件，可重定向到pages目录下的首页
```
使用Cursor AI生成代码时，严格按照此目录结构创建文件，确保资源文件与页面文件存放位置正确，便于管理维护。

### 2.2 代码质量管控
- **代码规范**：HTML代码遵循语义化原则，合理运用标签；CSS代码保持2个空格缩进，统一属性声明顺序，先布局属性，再文本属性，最后其他样式属性；若有JavaScript代码，遵循常见代码规范，如驼峰命名法、合理的代码注释等。
- **注释规范**：在HTML文件中，对重要结构部分添加注释说明功能，如`<!-- 首页核心产品展示区 -->`；CSS文件里，针对关键样式模块和复杂样式代码注释作用与目的，像`/* 导航栏链接悬停样式 */`；JavaScript代码在函数和关键逻辑处注释功能及实现思路。

## 三、页面开发
### 3.1 首页
- **布局与样式**：使用Cursor AI生成包含动态船舶3D模型展示区（若为静态展示，可通过`<canvas>`或`<iframe>`嵌入3D展示代码）和核心解决方案瀑布流的页面布局代码。运用Tailwind CSS的`grid`或`flex`布局排列元素，设置符合品牌视觉定位的背景颜色、文本颜色与图片样式。
- **内容填充**：插入公司品牌信息、热门产品推荐和核心解决方案简要介绍。用`<img>`标签插入3D船舶模型或产品图片，`<h1>` - `<h3>`标签设置标题，`<p>`标签描述内容。

### 3.2 解决方案页
- **布局与样式**：生成展示各类智能船舶系统解决方案的页面布局，采用卡片式布局展示各解决方案。利用Tailwind CSS的`card`类或自定义卡片样式，设置卡片边框、阴影、内边距等。
- **内容填充**：为每个解决方案添加标题、描述、技术优势和应用场景信息。用`<ul>`或`<ol>`列表展示要点，插入系统架构图或操作界面截图增强可视化效果。

### 3.3 技术优势页
- **布局与样式**：构建展示技术优势的页面，包含动态数据仪表盘（若为静态展示，可使用图表图片）和专利证书墙布局。使用`grid`布局排列数据仪表盘和证书图片，设置合适宽高保证页面美观。
- **内容填充**：添加技术优势文字说明，如数字孪生、人工智能等技术在智能船舶中的应用。插入数据仪表盘图片（或模拟数据的静态图表）和专利证书图片并添加说明。

### 3.4 案例展示页、新闻资讯页、关于我们页、联系方式页
- **布局与样式**：分别生成各页面布局代码，根据内容特点选择合适布局，如案例展示页用瀑布流布局展示案例，新闻资讯页用列表布局展示新闻标题和摘要。设置相应文本样式、链接样式和背景颜色。
- **内容填充**：案例展示页填充成功案例详细信息，包括项目背景、解决方案和成果展示；新闻资讯页添加新闻标题、发布时间和简要内容；关于我们页介绍公司历史、团队和价值观等；联系方式页提供公司地址、电话、邮箱和在线表单（若有，可使用静态表单模板）。

## 四、响应式设计与性能优化
### 4.1 响应式设计
- **媒体查询**：在CSS中运用`@media`查询，针对不同设备屏幕宽度设置样式。如手机端，将导航栏改为垂直排列，瀑布流布局元素改为单列显示；平板端，调整元素大小和间距适应屏幕尺寸。设置断点时，参考常见设备尺寸，如手机（320px - 767px）、平板（768px - 1023px）、PC（1024px及以上），确保页面在各设备上显示效果良好。
- **弹性布局**：广泛使用Flexbox和Grid布局实现页面元素弹性排列。在首页核心解决方案瀑布流中，用Flexbox使卡片元素自适应屏幕宽度；在复杂页面布局中，Grid布局精确控制元素位置和大小，保证不同屏幕尺寸下页面布局合理。
- **图片和媒体元素适配**：对于图片，使用`<picture>`元素结合`srcset`和`sizes`属性，根据设备屏幕分辨率和尺寸加载合适大小图片。如在手机端加载低分辨率、小尺寸图片，在PC端加载高分辨率、大尺寸图片，提高页面加载速度与显示效果。对于视频元素，设置合适`width`和`height`属性，并使用`controls`属性添加播放控制按钮，确保在不同设备上正常播放。

### 4.2 性能优化
- **图片优化**：使用Cursor AI生成代码时，选择合适图片格式，如JPEG用于照片，PNG用于透明背景图片或图标。利用图像编辑工具或在线压缩工具对图片进行压缩处理，减小文件大小，提升加载速度。
- **代码压缩**：运用工具（如CSSNano压缩CSS代码，HTMLMinifier压缩HTML代码）去除代码冗余部分，提高页面加载效率。在项目构建或部署环节集成这些工具，确保上线代码精简。
- **缓存策略**：设置合理缓存策略，对于不经常更新的静态资源（如CSS文件、图片），设置较长缓存时间，减少用户重复访问时的加载时间。可通过在服务器配置文件（如Apache或Nginx配置文件）中设置缓存头信息实现。 